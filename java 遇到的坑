
public class test {
	
	public static void main(String[] args) {
//		String[] ds={"a","b"};
//		System.out.println(ds.toString());
//		System.out.println(StringUtils.join(ds, ","));
		String[] tmp = "er	re	re	".toString().split("\t", 2);
		String[] tmp1 = "er	re	re	".toString().split("\t", -1);
		String[] tmp2 = "er	re	re	".toString().split("\t");
		System.out.println(String.join(",", tmp));
		System.out.println("tmp1.length:" + tmp1.length);
		System.out.println("tmp2.length:" +tmp2.length);
	}

}
输出：
er,re	re	
tmp1.length:4
tmp2.length:3

public String[] split(String regex,
                      int limit)

坑1：
第二个参数limit的用法：
-1 分割时不去除字符串最后的空格
0 要去除空格
大于0，要去除空格，并且数组不能超过过limit，如上例演示。


public String[] split(String regex,
                      int limit)
根据匹配给定的 正则表达式来拆分此字符串。 
此方法返回的数组包含此字符串的子字符串，每个子字符串都由另一个匹配给定表达式的子字符串终止，或者由此字符串末尾终止。数组中的子字符串按它们在此字符串中出现的顺序排列。如果表达式不匹配输入的任何部分，那么所得数组只具有一个元素，即此字符串。 

limit 参数控制模式应用的次数，因此影响所得数组的长度。如果该限制 n 大于 0，则模式将被最多应用 n - 1 次，数组的长度将不会大于 n，而且数组的最后一项将包含所有超出最后匹配的定界符的输入。如果 n 为非正，那么模式将被应用尽可能多的次数，而且数组可以是任何长度。如果 n 为 0，那么模式将被应用尽可能多的次数，数组可以是任何长度，并且结尾空字符串将被丢弃。 

例如，字符串 "boo:and:foo" 使用这些参数可生成以下结果： 



Regex

Limit

结果

: 2 { "boo", "and:foo" } 
: 5 { "boo", "and", "foo" } 
: -2 { "boo", "and", "foo" } 
o 5 { "b", "", ":and:f", "", "" } 
o -2 { "b", "", ":and:f", "", "" } 
o 0 { "b", "", ":and:f" } 

调用此方法的 str.split(regex, n) 形式与以下表达式产生的结果完全相同： 

Pattern. compile ( regex ). split ( str ,  n ) 


参数： regex - 定界正则表达式 limit - 结果阈值，如上所述 返回： 字符串数组，它是根据给定正则表达式的匹配拆分此字符串确定的 抛出： PatternSyntaxException - 如果正则表达式的语法无效 
